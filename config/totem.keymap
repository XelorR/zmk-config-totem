//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        eng_win {
            bindings = <&eng_win>;
            key-positions = <2 1>;
            layers = <0 1>;
        };

        rus_win {
            bindings = <&rus_win>;
            key-positions = <7 8>;
            layers = <0 1>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0 1 3 10>;
        };

        lock_win {
            bindings = <&kp LG(L)>;
            key-positions = <20 21>;
            layers = <0 1>;
        };

        dquo_en_win {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <6 7>;
            layers = <0>;
        };

        dquo_ru_win {
            bindings = <&kp AT_SIGN>;
            key-positions = <6 7>;
            layers = <1>;
        };

        ru_hard_sign {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 31>;
            layers = <1>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <8 6>;
            layers = <0>;
        };

        Ca {
            bindings = <&kp LC(A)>;
            key-positions = <21 24>;
            layers = <0 1>;
        };

        Cz {
            bindings = <&kp LC(Z)>;
            key-positions = <21 22>;
            layers = <0 1>;
        };

        Cv {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        Cx {
            bindings = <&kp LC(X)>;
            key-positions = <22 24>;
            layers = <0 1>;
        };

        Cy {
            bindings = <&kp LC(Y)>;
            key-positions = <21 23>;
            layers = <0 1>;
        };

        Cc {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1>;
        };

        Ct {
            bindings = <&kp LC(T)>;
            key-positions = <3 2>;
            layers = <0 1>;
        };

        gam_1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <24 25>;
            layers = <3>;
        };

        gam_2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <13 14>;
            layers = <3>;
        };

        gam_3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <3 4>;
            layers = <3>;
        };

        gam_4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <3 14>;
            layers = <3>;
        };

        gam_5 {
            bindings = <&kp N5>;
            key-positions = <13 25>;
            layers = <3>;
        };

        gam_ret {
            bindings = <&kp ENTER>;
            key-positions = <33 34>;
            layers = <3>;
        };
    };

    macros {
        en_win: en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(N8)>;
            label = "EN_WIN";
        };

        ru_win: ru_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(N9)>;
            label = "RU_WIN";
        };

        eng_win: eng_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &to 0>;
            label = "ENG_WIN";
        };

        rus_win: rus_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_win &to 1>;
            label = "RUS_WIN";
        };

        hash_win: hash_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp HASH &ru_win>;
            label = "HASH_WIN";
        };

        numero_win: numero_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_win &kp HASH &en_win>;
            label = "NUMERO_WIN";
        };

        lt_win: gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp LESS_THAN &ru_win>;
            label = "GT";
        };

        gt_win: gt_win_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp GREATER_THAN &ru_win>;
            label = "GT_WIN_";
        };

        lbracket_win: lbracket_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp LEFT_BRACKET &ru_win>;
            label = "LBRACKET_WIN";
        };

        rbracket_win: rbracket_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp RIGHT_BRACKET &ru_win>;
            label = "RBRACKET_WIN";
        };

        lbrace_win: lbrace_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp LEFT_BRACE &ru_win>;
            label = "LBRACE_WIN";
        };

        rbrace_win: rbrace_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp RIGHT_BRACE &ru_win>;
            label = "RBRACE_WIN";
        };

        pipe_win: pipe_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp PIPE &ru_win>;
            label = "PIPE_WIN";
        };

        grv_win: grv_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp GRAVE &ru_win>;
            label = "GRV_WIN";
        };

        tild_win: tild_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp TILDE &ru_win>;
            label = "TILD_WIN";
        };

        dlr_win: dlr_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp DOLLAR &ru_win>;
            label = "DLR_WIN";
        };

        amp_win: amp_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp AMPERSAND &ru_win>;
            label = "AMP_WIN";
        };

        at_win: at_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp AT_SIGN &ru_win>;
            label = "AT_WIN";
        };

        caret_win: caret_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp CARET &ru_win>;
            label = "CARET_WIN";
        };

        squot_win: squot_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp SQT &ru_win>;
            label = "SQUOT_WIN";
        };

        chat_win_en: chat_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &eng_win>;
            label = "CHAT_WIN";
        };

        chat_win_ru: chat_win_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &rus_win>;
            label = "CHAT_WIN_RU";
        };

        gam_win: wasd_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 3 &en_win>;
            label = "WASD_WIN";
        };

        ru_comma_win: ru_comma_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp QUESTION &kp SPACE>;
            label = "RU_COMMA_WIN";
        };

        en_comma_win: en_comma_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COMMA &kp SPACE>;
            label = "EN_COMMA_WIN";
        };

        ml: ml {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &key_on MACRO_PLACEHOLDER &layer_on 2>,
                <&macro_pause_for_release>,
                <&macro_param_1to1 &key_off MACRO_PLACEHOLDER &layer_off 2>;

            label = "ML";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        terminal_win: terminal_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_GUI>,
                <&kp LS(T) &kp E &kp R &kp M &kp I &kp N &kp A &kp L>,
                <&kp RET>;
            label = "TERMINAL_WIN";
            wait-ms = <400>;
        };
    };

    behaviors {
        key_on: key_on {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_ON";
            #binding-cells = <1>;
        };

        key_off: key_off {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        layer_on: layer_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_ON";
            #binding-cells = <1>;
        };

        layer_off: layer_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en_win {
            label = "EN_WIN";
            bindings = <
           &kp B       &kp L       &kp D        &kp C         &kp V         &kp J      &kp F        &kp O        &kp U          &kp COMMA
           &mt LGUI N  &mt LALT R  &mt LCTRL T  &mt LSHFT S   &lt 11 G      &kp Y      &mt RSHFT H  &mt RCTRL A  &mt RALT E     &mt RGUI I
&kp GRAVE  &kp X       &kp Q       &kp M        &kp W         &kp Z         &kp K      &kp P        &kp SQT      &kp SEMICOLON  &lt 12 DOT  &kp SLASH
                                   &lt 5 DEL    &lt 10 SPACE  &lt 12 TAB    &lt 8 RET  &lt 6 COMMA  &lt 5 DOT
            >;
        };

        ru_win {
            bindings = <
           &kp Q             &kp W             &kp E          &kp R             &kp T         &kp Y      &kp U           &kp I          &kp O             &kp P
           &hrml LEFT_GUI A  &hrml LEFT_ALT S  &hrml LCTRL D  &mt LEFT_SHIFT F  &lt 11 G      &kp H      &mt LSHFT J     &hrml LCTRL K  &hrml LEFT_ALT L  &hrml LEFT_GUI SEMICOLON
&kp GRAVE  &kp Z             &kp X             &kp C          &kp V             &kp B         &kp N      &kp M           &kp COMMA      &kp DOT           &lt 12 SQT                &kp LEFT_BRACKET
                                               &lt 5 DEL      &lt 10 SPACE      &lt 12 TAB    &lt 9 RET  &lt 7 QUESTION  &lt 5 SLASH
            >;

            label = "RU_WIN";
        };

        shortcut {
            label = "shortcut";
            bindings = <
           &kp B       &kp L       &kp D        &kp C         &kp V         &kp J      &kp F        &kp O        &kp U          &kp COMMA
           &mt LGUI N  &mt LALT R  &mt LCTRL T  &mt LSHFT S   &lt 11 G      &kp Y      &mt RSHFT H  &mt RCTRL A  &mt RALT E     &mt RGUI I
&kp GRAVE  &kp X       &kp Q       &kp M        &kp W         &kp Z         &kp K      &kp P        &kp SQT      &kp SEMICOLON  &lt 12 DOT  &kp SLASH
                                   &lt 5 DEL    &lt 10 SPACE  &lt 12 TAB    &lt 8 RET  &lt 6 COMMA  &lt 5 DOT
            >;
        };

        gaming_win {
            bindings = <
          &kp TAB    &kp Q  &kp X  &kp E      &kp R    &kp Y    &kp U     &kp I      &kp O    &kp P
          &kp LSHFT  &kp A  &kp W  &kp D      &kp F    &kp H    &kp J     &kp K      &kp L    &kp SEMI
&kp CAPS  &kp LCTRL  &kp Z  &kp S  &kp C      &kp V    &kp N    &kp M     &kp COMMA  &kp DOT  &lt 12 SLASH  &kp SQT
                            &kp G  &kp SPACE  &mo 4    &kp RET  &kp BSPC  &kp B
            >;

            label = "GAM_WIN";
        };

        gam_fn_win {
            bindings = <
              &kp J  &kp N2            &kp N5    &kp N3             &kp T    &kp C_VOLUME_UP    &kp F7      &kp F8         &kp F9  &kp F12
              &kp I  &kp LEFT_BRACKET  &kp F6    &kp RIGHT_BRACKET  &kp G    &kp C_VOLUME_DOWN  &kp F3      &kp F4         &kp F6  &kp F11
&chat_win_en  &kp M  &kp N1            &kp H     &kp N4             &kp B    &kp K_MUTE         &kp F1      &kp F2         &kp F3  &kp F10  &chat_win_ru
                                       &kp LALT  &kp ENTER          &none    &kp PRINTSCREEN    &kp DELETE  &kp BACKSLASH
            >;
        };

        fun_win {
            label = "fun_win";
            bindings = <
                &kp F12       &kp F7           &kp F8        &kp F9              &kp C_VOLUME_UP       &kp C_VOLUME_UP    &kp F7             &kp F8        &kp F9           &kp F12
                &mt LCMD F11  &mt LEFT_ALT F4  &mt LCTRL F5  &mt LSHFT F6        &kp C_VOL_DN          &kp C_VOL_DN       &mt LSHFT F4       &mt LCTRL F5  &mt LEFT_ALT F6  &mt LCMD F11
&kp SCROLLLOCK  &kp F10       &kp F1           &kp F2        &kp F3              &kp K_MUTE            &kp K_MUTE         &kp F1             &kp F2        &kp F3           &kp F10       &kp SCROLLLOCK
                                               &kp CAPSLOCK  &lt 10 LOCKING_NUM  &lt 12 PRINTSCREEN    &lt 8 PRINTSCREEN  &lt 6 LOCKING_NUM  &kp CAPSLOCK
            >;
        };

        num_en_win {
            bindings = <
           &kp ASTERISK  &kp N7                 &kp N8              &kp N9              &kp MINUS     &kp ASTERISK  &kp N7              &kp N8              &kp N9                 &kp MINUS
           &mt LCMD N0   &mt LEFT_ALT NUMBER_1  &mt LCTRL NUMBER_2  &mt LSHFT NUMBER_3  &kp PLUS      &kp N0        &mt LSHFT NUMBER_1  &mt LCTRL NUMBER_2  &mt LEFT_ALT NUMBER_3  &mt LCMD PLUS
&kp EQUAL  &kp SLASH     &kp NUMBER_4           &kp N5              &kp NUMBER_6        &kp DOT       &kp SLASH     &kp NUMBER_4        &kp N5              &kp NUMBER_6           &kp DOT        &kp EQUAL
                                                &lt 5 COLON         &lt 10 SPACE        &lt 12 TAB    &lt 8 RET     &none               &lt 5 COLON
            >;

            label = "NUM_EN_WIN";
        };

        num_ru_win {
            label = "NUM_RU_WIN";
            bindings = <
           &kp ASTERISK  &kp N7                 &kp N8              &kp N9              &kp MINUS     &kp ASTERISK  &kp N7              &kp N8              &kp N9                 &kp MINUS
           &mt LCMD N0   &mt LEFT_ALT NUMBER_1  &mt LCTRL NUMBER_2  &mt LSHFT NUMBER_3  &kp PLUS      &kp N0        &mt LSHFT NUMBER_1  &mt LCTRL NUMBER_2  &mt LEFT_ALT NUMBER_3  &mt LCMD PLUS
&kp EQUAL  &kp PIPE      &kp NUMBER_4           &kp N5              &kp NUMBER_6        &kp SLASH     &kp PIPE      &kp NUMBER_4        &kp N5              &kp NUMBER_6           &kp SLASH      &kp EQUAL
                                                &lt 5 CARET         &lt 10 SPACE        &lt 12 TAB    &lt 9 RET     &none               &lt 5 CARET
            >;
        };

        sym_en_win {
            label = "SYM_EN_WIN";
            bindings = <
           &kp EXCL             &kp LESS_THAN                  &kp EQUAL        &kp GREATER_THAN                  &kp GRAVE        &numero_win  &kp LEFT_BRACKET      &kp UNDERSCORE       &kp RIGHT_BRACKET         &kp SQT
           &mt LEFT_GUI DOLLAR  &mt LEFT_ALT LEFT_PARENTHESIS  &mt LCTRL MINUS  &mt LEFT_SHIFT RIGHT_PARENTHESIS  &kp PLUS         &kp PERCENT  &mt LSHFT LEFT_BRACE  &mt LCTRL SEMICOLON  &mt LEFT_ALT RIGHT_BRACE  &mt RA(LEFT_GUI) QUESTION
&kp COMMA  &kp HASH             &mt LCTRL ASTERISK             &kp COLON        &kp SLASH                         &kp BACKSLASH    &kp AT       &kp PIPE              &kp TILDE            &kp AMPERSAND             &kp CARET                  &kp PERIOD
                                                               &lt 5 DEL        &lt 10 SPACE                      &lt 12 TAB       &kp RET      &lt 6 COMMA           &lt 5 DOT
            >;
        };

        sym_ru_win {
            label = "SYM_RU_WIN";
            bindings = <
              &kp EXCL   &lt_win                        &kp EQUAL        &gt_win                           &grv_win         &kp HASH     &lbracket_win   &kp UNDERSCORE    &rbracket_win  &squot_win
              &dlr_win   &mt LEFT_ALT LEFT_PARENTHESIS  &mt LCTRL MINUS  &mt LEFT_SHIFT RIGHT_PARENTHESIS  &kp PLUS         &kp PERCENT  &lbrace_win     &mt LCTRL DOLLAR  &rbrace_win    &mt RA(LEFT_GUI) AMPS
&kp QUESTION  &hash_win  &mt LCTRL ASTERISK             &kp CARET        &kp PIPE                          &kp BACKSLASH    &at_win      &pipe_win       &tild_win         &amp_win       &caret_win             &kp SLASH
                                                        &lt 5 DEL        &lt 10 SPACE                      &lt 12 TAB       &kp RET      &lt 7 QUESTION  &lt 5 SLASH
            >;
        };

        nav_layer_win {
            label = "Extend_win";
            bindings = <
        &kp LA(F4)    &kp LS(LC(TAB))   &kp TAB      &kp LC(TAB)        &kp LEFT_GUI        &kp INS               &kp HOME        &kp UP_ARROW     &kp END    &kp DEL
        &kp LEFT_GUI  &kp LEFT_ALT      &kp LCTRL    &kp LEFT_SHIFT     &lt 11 LS(LG(S))    &caps_word            &kp LEFT        &kp DOWN         &kp RIGHT  &kp BSPC
&trans  &kp LC(F4)    &kp LG(LC(LEFT))  &kp LG(TAB)  &kp LC(LG(RIGHT))  &kp LG(D)           &kp C_AL_MY_COMPUTER  &kp PG_UP       &kp K_APP        &kp PG_DN  &lt 12 K_CALC  &trans
                                        &lt 5 DEL    &kp SPACE          &lt 12 TAB          &lt 8 RET             &lt 6 LA(LEFT)  &lt 5 LA(RIGHT)
            >;
        };

        nav_files_win {
            bindings = <
        &trans        &trans    &trans     &trans     &trans    &trans  &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &trans
        &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp F2  &kp LA(UP)    &kp DOWN      &kp RET        &kp LA(RET)
&trans  &trans        &trans    &trans     &trans     &trans    &trans  &kp LC(V)     &kp LC(C)     &kp LC(X)      &trans       &trans
                                &trans     &trans     &trans    &trans  &trans        &trans
            >;

            label = "NAV_FILES_WIN";
        };

        mouse_win {
            bindings = <
        &trans        &out OUT_USB  &bt BT_CLR    &out OUT_BLE  &bt BT_CLR_ALL    &trans     &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP
        &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL     &kp LSHFT     &trans            &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans     &eng_win        &rus_win        &gam_win         &to 10          &trans
                                    &lt 5 DEL     &lt 10 SPACE  &kp TAB           &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;
        };
    };
};
