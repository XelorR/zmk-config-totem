//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        eng_win {
            bindings = <&eng_win>;
            key-positions = <2 1>;
            layers = <0 1>;
        };

        rus_win {
            bindings = <&rus_win>;
            key-positions = <7 8>;
            layers = <0 1>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0 1 6 20 2 3 21 7 12 14 13 15>;
        };

        lock_win {
            bindings = <&kp LG(L)>;
            key-positions = <20 21>;
            layers = <0 1>;
        };

        dquo_en_win {
            bindings = <&kp_unshift DOUBLE_QUOTES>;
            key-positions = <6 7>;
            layers = <0 2>;
        };

        dquo_ru_win {
            bindings = <&kp_unshift AT_SIGN>;
            key-positions = <6 7>;
            layers = <1 3>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <27 28>;
            layers = <0 2>;
        };

        Ca {
            bindings = <&kp LC(A)>;
            key-positions = <21 24>;
            layers = <0 1>;
        };

        Cz {
            bindings = <&kp LC(Z)>;
            key-positions = <21 22>;
            layers = <0 1>;
        };

        Cv {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0 1>;
        };

        Cx {
            bindings = <&kp LC(X)>;
            key-positions = <22 24>;
            layers = <0 1>;
        };

        Cy {
            bindings = <&kp LC(Y)>;
            key-positions = <21 23>;
            layers = <0 1>;
        };

        Cc {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0 1>;
        };

        Ct {
            bindings = <&kp LC(T)>;
            key-positions = <3 2>;
            layers = <0 1>;
        };

        Ga {
            bindings = <&kp LG(A)>;
            key-positions = <21 24>;
            layers = <2 3>;
        };

        Gz {
            bindings = <&kp LG(Z)>;
            key-positions = <21 22>;
            layers = <2 3>;
        };

        Gv {
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
            layers = <2 3>;
        };

        Gx {
            bindings = <&kp LG(X)>;
            key-positions = <22 24>;
            layers = <2 3>;
        };

        Gy {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <21 23>;
            layers = <2 3>;
        };

        Gc {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
            layers = <2 3>;
        };

        Gt {
            bindings = <&kp LG(T)>;
            key-positions = <3 2>;
            layers = <2 3>;
        };

        gam_1 {
            bindings = <&kp NUMBER_1>;
            key-positions = <24 25>;
            layers = <6 7>;
        };

        gam_2 {
            bindings = <&kp NUMBER_2>;
            key-positions = <13 14>;
            layers = <6 7>;
        };

        gam_3 {
            bindings = <&kp NUMBER_3>;
            key-positions = <3 4>;
            layers = <6 7>;
        };

        gam_4 {
            bindings = <&kp NUMBER_4>;
            key-positions = <3 14>;
            layers = <6 7>;
        };

        gam_5 {
            bindings = <&kp N5>;
            key-positions = <13 25>;
            layers = <6 7>;
        };

        gam_ret {
            bindings = <&kp ENTER>;
            key-positions = <33 34>;
            layers = <6 7>;
        };

        eng_mac {
            bindings = <&eng_mac>;
            key-positions = <1 2>;
            layers = <2 3>;
        };

        rus_mac {
            bindings = <&rus_mac>;
            key-positions = <7 8>;
            layers = <2 3>;
        };

        eng_and {
            bindings = <&eng_and>;
            key-positions = <1 3>;
            layers = <0 1>;
        };

        rus_and {
            bindings = <&rus_and>;
            key-positions = <8 6>;
            layers = <0 1>;
        };

        eng_ios {
            bindings = <&eng_ios>;
            key-positions = <1 3>;
            layers = <2 3>;
        };

        rus_ios {
            bindings = <&rus_ios>;
            key-positions = <6 8>;
            layers = <2 3>;
        };

        lock_mac {
            bindings = <&kp LC(LG(Q))>;
            key-positions = <20 21>;
            layers = <2 3>;
        };
    };

    macros {
        en_win: en_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(N8)>;
            label = "EN_WIN";
        };

        ru_win: ru_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(N9)>;
            label = "RU_WIN";
        };

        eng_win: eng_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &to 0>;
            label = "ENG_WIN";
        };

        rus_win: rus_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_win &to 1>;
            label = "RUS_WIN";
        };

        hash_win: hash_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift HASH &ru_win>;
            label = "HASH_WIN";
            tap-ms = <50>;
        };

        numero_win: numero_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_win &kp_unshift HASH &en_win>;
            label = "NUMERO_WIN";
            tap-ms = <50>;
        };

        lt_win: gt {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift LESS_THAN &ru_win>;
            label = "GT";
            tap-ms = <50>;
        };

        gt_win: gt_win_ {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift GREATER_THAN &ru_win>;
            label = "GT_WIN_";
            tap-ms = <50>;
        };

        lbracket_win: lbracket_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift LEFT_BRACKET &ru_win>;
            label = "LBRACKET_WIN";
            tap-ms = <50>;
        };

        rbracket_win: rbracket_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift RIGHT_BRACKET &ru_win>;
            label = "RBRACKET_WIN";
            tap-ms = <50>;
        };

        lbrace_win: lbrace_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift LEFT_BRACE &ru_win>;
            label = "LBRACE_WIN";
            tap-ms = <50>;
        };

        rbrace_win: rbrace_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift RIGHT_BRACE &ru_win>;
            label = "RBRACE_WIN";
            tap-ms = <50>;
        };

        pipe_win: pipe_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift PIPE &ru_win>;
            label = "PIPE_WIN";
            tap-ms = <50>;
        };

        grv_win: grv_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift GRAVE &ru_win>;
            label = "GRV_WIN";
            tap-ms = <50>;
        };

        tild_win: tild_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift TILDE &ru_win>;
            label = "TILD_WIN";
            tap-ms = <50>;
        };

        dlr_win: dlr_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift DOLLAR &ru_win>;
            label = "DLR_WIN";
            tap-ms = <50>;
        };

        amp_win: amp_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift AMPERSAND &ru_win>;
            label = "AMP_WIN";
            tap-ms = <50>;
        };

        at_win: at_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift AT_SIGN &ru_win>;
            label = "AT_WIN";
            tap-ms = <50>;
        };

        caret_win: caret_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift CARET &ru_win>;
            label = "CARET_WIN";
            tap-ms = <50>;
        };

        squot_win: squot_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_win &kp_unshift SQT &ru_win>;
            label = "SQUOT_WIN";
            tap-ms = <50>;
        };

        chat_win_en: chat_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &eng_win>;
            label = "CHAT_WIN";
        };

        chat_win_ru: chat_win_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp T &rus_win>;
            label = "CHAT_WIN_RU";
        };

        gam_win: wasd_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 6 &en_win>;
            label = "WASD_WIN";
        };

        ml: ml {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_param_1to1 &key_on MACRO_PLACEHOLDER &layer_on 4>,
                <&macro_pause_for_release>,
                <&macro_param_1to1 &key_off MACRO_PLACEHOLDER &layer_off 4>;

            label = "ML";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        show_desktop_mac: show_desktop_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&key_on GLOBE &kp F11 &key_off GLOBE>;
            label = "SHOW_DESKTOP_MAC";
        };

        en_mac: en_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(LS(N8))>;
            label = "EN_MAC";
        };

        ru_mac: ru_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(LS(N9))>;
            label = "RU_MAC";
        };

        eng_mac: eng_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &to 2>;
            label = "ENG_MAC";
        };

        rus_mac: rus_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_mac &to 3>;
            label = "RUS_MAC";
        };

        working_win: working_win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 1 &eng_win>;
            label = "WORKING_WIN";
        };

        personal_mac: personal_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 2 &eng_mac>;
            label = "PERSONAL_MAC";
        };

        eng_and: eng_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(SPACE) &to 0>;
            label = "ENG_AND";
        };

        rus_and: rus_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(SPACE) &to 1>;
            label = "RUS_AND";
        };

        eng_ios: eng_ios {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(SPACE) &to 2>;
            label = "ENG_IOS";
        };

        rus_ios: rus_ios {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp_unshift LC(SPACE) &to 3>;
            label = "RUS_IOS";
        };

        hash_mac: hash_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift HASH &ru_mac>;
            label = "HASH_MAC";
            tap-ms = <50>;
        };

        star_mac: star_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift STAR &ru_mac>;
            label = "STAR_MAC";
            tap-ms = <50>;
        };

        tild_mac: tild_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift TILDE &ru_mac>;
            label = "TILD_MAC";
            tap-ms = <50>;
        };

        backslash_mac: backslash_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift BSLH &ru_mac>;
            label = "BACKSLASH_MAC";
            tap-ms = <50>;
        };

        grv_mac: grv_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift GRAVE &ru_mac>;
            label = "GRV_MAC";
            tap-ms = <50>;
        };

        pipe_mac: pipe_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift PIPE &ru_mac>;
            label = "PIPE_MAC";
            tap-ms = <50>;
        };

        at_mac: at_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift AT &ru_mac>;
            label = "AT_MAC";
            tap-ms = <50>;
        };

        amp_mac: amp_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift AMPS &ru_mac>;
            label = "AMP_MAC";
            tap-ms = <50>;
        };

        squote_mac: squote_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift SQT &ru_mac>;
            label = "SQUOTE_MAC";
            tap-ms = <50>;
        };

        caret_mac: caret_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift CARET &ru_mac>;
            label = "CARET_MAC";
            tap-ms = <50>;
        };

        numero_mac: numero_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&ru_mac &kp_unshift HASH &en_mac>;
            label = "NUMERO_MAC";
            tap-ms = <50>;
        };

        dlr_mac: dlr_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&en_mac &kp_unshift DLLR &ru_mac>;
            label = "DLR_MAC";
            tap-ms = <50>;
        };

        home_mac: home_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LG(LEFT)>;
            label = "HOME_MAC";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        end_mac: end_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(E) &kp LG(RIGHT)>;
            label = "END_MAC";
            tap-ms = <0>;
            wait-ms = <0>;
        };

        personal_and: personal_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &to 0>;
            label = "PERSONAL_AND";
        };

        finder_mac: finder_mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(SPACE) &kp K_CALC &kp K_CALC &kp K_CALC &kp LS(F) &kp I &kp N &kp D &kp E &kp R &kp K_CALC &kp K_CALC &kp RET>;
            label = "FINDER_MAC";
        };

        kp_unshift: kp_unshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&key_off RSHFT &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "KP_UNSHIFT";
            wait-ms = <0>;
            tap-ms = <0>;
        };

        kp_symspace: kp_symspace {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp_unshift MACRO_PLACEHOLDER &kp SPACE>;
            label = "KP_SYMSPACE";
        };

        kp_symspcap: kp_symspcap {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp_symspace MACRO_PLACEHOLDER &sk LSHFT>;
            label = "KP_SYMSPCAP";
        };
    };

    behaviors {
        key_on: key_on {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_ON";
            #binding-cells = <1>;
        };

        key_off: key_off {
            compatible = "zmk,behavior-key-toggle";
            label = "KEY_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        layer_on: layer_on {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_ON";
            #binding-cells = <1>;
        };

        layer_off: layer_off {
            compatible = "zmk,behavior-toggle-layer";
            label = "LAYER_OFF";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hrml: hrml {
            compatible = "zmk,behavior-hold-tap";
            label = "HRML";
            bindings = <&ml>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        lt_unshift: lt_unshift {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_UNSHIFT";
            bindings = <&mo>, <&kp_unshift>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            flavor = "tap-preferred";
            quick-tap-ms = <100>;
        };

        mt_unshift: mt_unshift {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_UNSHIFT";
            bindings = <&kp>, <&kp_unshift>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        lt_symspace: lt_symspace {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYMSPACE";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp_symspace>;
        };

        lt_symspcap: lt_symspcap {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_SYMSPCAP";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp_symspcap>;
        };

        ru_soft_hard_signs: ru_soft_hard_signs {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_SOFT_HARD_SIGNS";
            bindings = <&kp M>, <&kp RBKT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_win_en: comma_win_en {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_WIN_EN";
            bindings = <&lt_symspace 12 COMMA>, <&lt_symspcap 12 QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_win_ru: comma_win_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_WIN_RU";
            bindings = <&lt_symspace 12 QMARK>, <&lt_symspcap 12 AMPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_mac_ru: comma_mac_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MAC_RU";
            bindings = <&lt_symspace 12 CARET>, <&lt_symspcap 12 QMARK>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_win_en: dot_win_en {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_WIN_EN";
            bindings = <&lt_symspcap 10 DOT>, <&lt_symspcap 10 EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_win_ru: dot_win_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_WIN_RU";
            bindings = <&lt_symspcap 10 SLASH>, <&lt_symspcap 10 EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_mac_en: dot_mac_en {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MAC_EN";
            bindings = <&lt_symspcap 11 DOT>, <&lt_symspcap 11 EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_mac_ru: dot_mac_ru {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MAC_RU";
            bindings = <&lt_symspcap 11 AMPS>, <&lt_symspcap 11 EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        up_no_rsft: up_no_rsft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UP>, <&kp UP>;

            mods = <(MOD_RSFT)>;
            keep-mods = <0>;
        };

        down_no_rsft: down_no_rsft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOWN>, <&kp DOWN>;

            mods = <(MOD_RSFT)>;
            keep-mods = <0>;
        };

        left_no_rsft: left_no_rsft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LEFT>, <&kp LEFT>;

            mods = <(MOD_RSFT)>;
            keep-mods = <0>;
        };

        right_no_rsft: right_no_rsft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RIGHT>, <&kp RIGHT>;

            mods = <(MOD_RSFT)>;
            keep-mods = <0>;
        };

        sqt_no_rsft: sqt_no_rsft {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp SQT>;

            mods = <(MOD_RSFT)>;
            keep-mods = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en_win {
            label = "EN_WIN";
            bindings = <
                   &kp B       &kp L       &kp D        &kp C                 &kp V                 &kp J               &kp F          &kp O         &kp U                  &kp_unshift COMMA
                   &mt LGUI N  &mt LALT R  &mt LCTRL T  &mt LSHFT S           &lt 22 G              &kp Y               &mt RSHFT H    &mt RCTRL A   &mt RALT E             &mt RGUI I
&kp_unshift GRAVE  &kp X       &kp Q       &kp M        &kp W                 &kp Z                 &kp K               &kp P          &sqt_no_rsft  &kp_unshift SEMICOLON  &lt_unshift 24 DOT  &kp_unshift SLASH
                                           &lt 10 DEL   &lt_unshift 20 SPACE  &lt_unshift 24 TAB    &lt_unshift 16 RET  &comma_win_en  &dot_win_en
            >;
        };

        ru_win {
            bindings = <
           &kp Q             &kp W             &kp E          &kp R             &kp T       &kp Y   &kp U                &kp I          &kp O             &kp P
           &hrml LEFT_GUI A  &hrml LEFT_ALT S  &hrml LCTRL D  &mt LEFT_SHIFT F  &lt 22 G    &kp H   &mt LSHFT J          &hrml LCTRL K  &hrml LEFT_ALT L  &hrml LEFT_GUI SEMICOLON
&kp GRAVE  &kp Z             &kp X             &kp C          &kp V             &kp B       &kp N   &ru_soft_hard_signs  &kp COMMA      &kp DOT           &lt 24 LBKT               &kp SQT
                                               &trans         &trans            &trans      &trans  &comma_win_ru        &dot_win_ru
            >;

            label = "RU_WIN";
        };

        en_mac {
            bindings = <
        &trans       &trans  &trans       &trans                &trans                &trans  &trans  &trans       &trans  &trans
        &mt LCTRL N  &trans  &mt LGUI T   &trans                &lt 23 G              &trans  &trans  &mt LGUI A   &trans  &mt LCTRL I
&trans  &trans       &trans  &trans       &trans                &trans                &trans  &trans  &trans       &trans  &lt_unshift 25 PERIOD  &trans
                             &lt 11 BSPC  &lt_unshift 21 SPACE  &lt_unshift 25 TAB    &trans  &trans  &dot_mac_en
            >;
        };

        ru_mac {
            bindings = <
               &kp Q          &kp W         &kp E         &kp R                 &kp T                 &kp Y   &kp U                &kp I         &kp O         &kp P
               &hrml LCTRL A  &hrml LALT S  &hrml LGUI D  &mt LSHFT F           &lt 23 G              &kp H   &mt LSHFT J          &hrml LGUI K  &hrml LALT L  &hrml LCTRL SEMICOLON
&kp BACKSLASH  &kp Z          &kp X         &kp C         &kp V                 &kp B                 &kp N   &ru_soft_hard_signs  &kp COMMA     &kp DOT       &lt 25 LBKT            &kp SQT
                                            &lt 11 BSPC   &lt_unshift 21 SPACE  &lt_unshift 25 TAB    &trans  &comma_mac_ru        &dot_mac_ru
            >;
        };

        shortcut_win {
            label = "shortcut_win";
            bindings = <
           &kp B       &kp L       &kp D        &kp C        &kp V     &kp J   &kp F         &kp O        &kp U          &kp COMMA
           &mt LGUI N  &mt LALT R  &mt LCTRL T  &mt LSHFT S  &trans    &kp Y   &mt RSHFT H   &mt RCTRL A  &mt RALT E     &mt RGUI I
&kp GRAVE  &kp X       &kp Q       &kp M        &kp W        &kp Z     &kp K   &kp P         &kp SQT      &kp SEMICOLON  &kp DOT     &kp SLASH
                                   &trans       &trans       &trans    &trans  &lt 12 COMMA  &lt 10 DOT
            >;
        };

        shortcut_mac {
            bindings = <
        &trans       &trans  &trans      &trans  &trans    &trans  &trans        &trans      &trans  &trans
        &mt LCTRL N  &trans  &mt LGUI T  &trans  &trans    &trans  &trans        &mt LGUI A  &trans  &mt LCTRL I
&trans  &trans       &trans  &trans      &trans  &trans    &trans  &trans        &trans      &trans  &trans       &trans
                             &trans      &trans  &trans    &trans  &lt 12 COMMA  &lt 11 DOT
            >;
        };

        gaming_win {
            bindings = <
          &kp TAB    &kp Q  &kp W     &kp E      &kp R    &kp Y    &kp U     &kp I      &kp O    &kp P
          &kp LSHFT  &kp A  &kp S     &kp D      &kp F    &kp H    &kp J     &kp K      &kp L    &kp SEMI
&kp CAPS  &kp LCTRL  &kp Z  &kp X     &kp C      &kp V    &kp N    &kp M     &kp COMMA  &kp DOT  &lt 24 SLASH  &kp SQT
                            &kp LALT  &kp SPACE  &mo 8    &kp RET  &kp BSPC  &kp DEL
            >;

            label = "GAM_WIN";
        };

        gaming_mac {
            bindings = <
          &kp TAB    &kp Q  &kp W     &kp E      &kp R    &kp Y      &kp U     &kp I      &kp O    &kp P
          &kp LSHFT  &kp A  &kp S     &kp D      &kp F    &kp H      &kp J     &kp K      &kp L    &kp SEMI
&kp CAPS  &kp LCTRL  &kp Z  &kp X     &kp C      &kp V    &kp N      &kp M     &kp COMMA  &kp DOT  &lt 25 SLASH  &kp APOS
                            &kp LALT  &kp SPACE  &mo 8    &kp ENTER  &kp BSPC  &kp DEL
            >;

            label = "GAM_MAC";
        };

        gam_fn_win {
            bindings = <
              &kp J  &kp N2            &kp N5    &kp N3             &kp T    &kp C_VOLUME_UP    &kp F7     &kp F8         &kp F9  &kp F12
              &kp I  &kp LEFT_BRACKET  &kp F6    &kp RIGHT_BRACKET  &kp G    &kp C_VOLUME_DOWN  &kp F4     &kp F5         &kp F6  &kp F11
&chat_win_en  &kp M  &kp N1            &kp H     &kp N4             &kp B    &kp K_MUTE         &kp F1     &kp F2         &kp F3  &kp F10  &chat_win_ru
                                       &kp RALT  &kp ENTER          &none    &kp PRINTSCREEN    &kp GRAVE  &kp BACKSLASH
            >;
        };

        gam_fn_mac {
            bindings = <
       &trans  &trans  &trans  &trans  &trans    &trans          &trans  &trans  &trans  &trans
       &trans  &trans  &trans  &trans  &trans    &trans          &trans  &trans  &trans  &trans
&none  &trans  &trans  &trans  &trans  &trans    &trans          &trans  &trans  &trans  &trans  &none
                       &trans  &trans  &trans    &kp LG(LS(N3))  &trans  &trans
            >;
        };

        fun_win {
            label = "fun_win";
            bindings = <
                &kp F12       &kp F7           &kp F8        &kp F9             &kp C_VOLUME_UP       &kp C_VOLUME_UP     &kp F7             &kp F8        &kp F9           &kp F12
                &mt LCMD F11  &mt LEFT_ALT F4  &mt LCTRL F5  &mt LSHFT F6       &kp C_VOL_DN          &kp C_VOL_DN        &mt LSHFT F4       &mt LCTRL F5  &mt LEFT_ALT F6  &mt LCMD F11
&kp SCROLLLOCK  &kp F10       &kp F1           &kp F2        &kp F3             &kp K_MUTE            &kp K_MUTE          &kp F1             &kp F2        &kp F3           &kp F10       &kp SCROLLLOCK
                                               &kp CAPSLOCK  &lt 20 KP_NUMLOCK  &lt 24 PRINTSCREEN    &lt 16 PRINTSCREEN  &lt 12 KP_NUMLOCK  &kp CAPSLOCK
            >;
        };

        fun_mac {
            label = "fun_mac";
            bindings = <
                &kp F12        &kp F7  &kp F8        &kp F9             &kp C_VOL_UP               &kp C_VOL_UP       &kp F7             &kp F8        &kp F9  &kp F12
                &mt LCTRL F11  &kp F4  &mt LGUI F5   &kp F6             &kp C_VOL_DN               &kp C_VOL_DN       &kp F4             &mt LGUI F5   &kp F6  &mt LCTRL F11
&kp SCROLLLOCK  &kp F10        &kp F1  &kp F2        &kp F3             &kp K_MUTE                 &kp K_MUTE         &kp F1             &kp F2        &kp F3  &kp F10        &kp SCROLLLOCK
                                       &kp CAPSLOCK  &lt 21 KP_NUMLOCK  &lt 25 LS(LG(NUMBER_3))    &lt 16 LS(LG(N3))  &lt 12 KP_NUMLOCK  &kp CAPSLOCK
            >;
        };

        num_en_win {
            bindings = <
              &kp KP_MULTIPLY  &kp KP_N7           &kp KP_N8        &kp KP_N9        &kp KP_MINUS    &kp MINUS  &kp N7              &kp N8              &kp N9           &kp STAR
              &mt LCMD KP_N0   &mt LEFT_ALT KP_N1  &mt LCTRL KP_N2  &mt LSHFT KP_N3  &kp KP_PLUS     &kp PLUS   &mt LSHFT NUMBER_1  &mt LCTRL NUMBER_2  &mt LEFT_ALT N3  &mt LCMD N0
&kp KP_EQUAL  &kp KP_SLASH     &kp KP_N4           &kp KP_N5        &kp KP_N6        &kp KP_DOT      &kp DOT    &kp N4              &kp N5              &kp N6           &lt 24 SLASH  &kp EQUAL
                                                   &lt 10 COLON     &trans           &trans          &trans     &kp SPACE           &lt 10 COLON
            >;

            label = "NUM_EN_WIN";
        };

        num_ru_win {
            label = "NUM_RU_WIN";
            bindings = <
        &trans  &trans  &trans        &trans  &trans    &trans     &trans  &trans        &trans  &trans
        &trans  &trans  &trans        &trans  &trans    &trans     &trans  &trans        &trans  &trans
&trans  &trans  &trans  &trans        &trans  &trans    &kp SLASH  &trans  &trans        &trans  &kp PIPE  &trans
                        &lt 10 CARET  &trans  &trans    &trans     &trans  &lt 10 CARET
            >;
        };

        num_en_mac {
            bindings = <
        &trans           &trans  &trans          &trans  &trans    &trans  &trans  &trans        &trans  &trans
        &mt LCTRL KP_N0  &trans  &mt LGUI KP_N2  &trans  &trans    &trans  &trans  &mt LGUI N2   &trans  &mt LCTRL N0
&trans  &trans           &trans  &trans          &trans  &trans    &trans  &trans  &trans        &trans  &trans        &trans
                                 &lt 11 COLON    &trans  &trans    &trans  &trans  &lt 11 COLON
            >;

            label = "NUM_EN_mac";
        };

        num_ru_mac {
            label = "NUM_RU_mac";
            bindings = <
        &trans           &trans  &trans          &trans  &trans    &trans    &trans  &trans        &trans  &kp KP_MULTIPLY
        &mt LCTRL KP_N0  &trans  &mt LGUI KP_N2  &trans  &trans    &trans    &trans  &mt LGUI N2   &trans  &mt LCTRL N0
&trans  &trans           &trans  &trans          &trans  &trans    &kp AMPS  &trans  &trans        &trans  &trans           &trans
                                 &lt 11 PRCNT    &trans  &trans    &trans    &trans  &lt 11 PRCNT
            >;
        };

        sym_en_win {
            label = "SYM_EN_WIN";
            bindings = <
                   &kp_unshift EXCL             &kp_unshift LESS_THAN                  &kp_unshift EQUAL        &kp_unshift GREATER_THAN                  &kp_unshift GRAVE        &numero_win          &kp_unshift LEFT_BRACKET      &kp UNDERSCORE               &kp_unshift RIGHT_BRACKET         &kp_unshift COMMA
                   &mt_unshift LEFT_GUI DOLLAR  &mt_unshift LEFT_ALT LEFT_PARENTHESIS  &mt_unshift LCTRL MINUS  &mt_unshift LEFT_SHIFT RIGHT_PARENTHESIS  &kp_unshift PLUS         &kp_unshift PERCENT  &mt_unshift LSHFT LEFT_BRACE  &mt_unshift LCTRL SEMICOLON  &mt_unshift LEFT_ALT RIGHT_BRACE  &mt_unshift LEFT_GUI QUESTION
&kp_unshift CARET  &kp_unshift HASH             &mt_unshift LCTRL ASTERISK             &kp_unshift COLON        &kp_unshift SLASH                         &kp_unshift BACKSLASH    &kp_unshift AT       &kp_unshift PIPE              &kp_unshift TILDE            &kp_unshift AMPERSAND             &kp_unshift DOT                &kp_unshift SQT
                                                                                       &trans                   &trans                                    &trans                   &trans               &trans                        &trans
            >;
        };

        sym_ru_win {
            label = "SYM_RU_WIN";
            bindings = <
            &trans     &lt_win  &trans             &gt_win           &grv_win    &kp_unshift HASH  &lbracket_win  &trans                    &rbracket_win  &kp_unshift QMARK
            &dlr_win   &trans   &trans             &trans            &trans      &trans            &lbrace_win    &mt_unshift LCTRL DOLLAR  &rbrace_win    &mt_unshift RA(LEFT_GUI) AMPS
&caret_win  &hash_win  &trans   &kp_unshift CARET  &kp_unshift PIPE  &trans      &at_win           &pipe_win      &tild_win                 &amp_win       &kp_unshift SLASH              &squot_win
                                &trans             &trans            &trans      &trans            &trans         &trans
            >;
        };

        sym_en_mac {
            label = "SYM_EN_mac";
            bindings = <
        &trans                    &trans  &trans                  &trans  &trans    &numero_mac  &trans  &trans                      &trans  &trans
        &mt_unshift LCTRL DOLLAR  &trans  &mt_unshift LGUI MINUS  &trans  &trans    &trans       &trans  &mt_unshift LGUI SEMICOLON  &trans  &mt_unshift LCTRL QUESTION
&trans  &trans                    &trans  &trans                  &trans  &trans    &trans       &trans  &trans                      &trans  &trans                      &trans
                                          &trans                  &trans  &trans    &trans       &trans  &trans
            >;
        };

        sym_ru_mac {
            bindings = <
            &trans     &kp_unshift LS(NUBS)  &trans                  &kp_unshift NUBS  &grv_mac          &kp_unshift HASH  &kp_unshift TILDE              &trans                 &kp_unshift GRAVE        &kp_unshift CARET
            &dlr_mac   &trans                &mt_unshift LGUI MINUS  &trans            &trans            &kp_unshift DLLR  &mt_unshift LEFT_ARROW RA(N9)  &mt_unshift LGUI STAR  &mt_unshift LALT RA(N0)  &mt_unshift LCTRL QMARK
&caret_mac  &hash_mac  &star_mac             &kp_unshift PRCNT       &trans            &backslash_mac    &at_mac           &pipe_mac                      &tild_mac              &amp_mac                 &kp_unshift AMPS         &squote_mac
                                             &trans                  &trans            &trans            &trans            &trans                         &trans
            >;
        };

        nav_layer_win {
            label = "Extend_win";
            bindings = <
                      &kp LA(F4)    &kp LS(LC(TAB))   &kp TAB      &kp LC(TAB)        &kp LEFT_GUI        &kp INS               &kp HOME         &up_no_rsft       &kp END         &kp DEL
                      &kp LEFT_GUI  &kp LEFT_ALT      &kp LCTRL    &kp LEFT_SHIFT     &lt 22 LS(LG(S))    &key_on RSHFT         &left_no_rsft    &down_no_rsft     &right_no_rsft  &kp BSPC
&kp LC(LEFT_BRACKET)  &kp LG(D)     &kp LG(LC(LEFT))  &kp LG(TAB)  &kp LC(LG(RIGHT))  &kp C_AL_CALC       &kp C_AL_MY_COMPUTER  &kp PG_UP        &kp K_APP         &kp PG_DN       &lt 24 BSPC  &kp LC(RIGHT_BRACKET)
                                                      &trans       &kp SPACE          &trans              &trans                &lt 12 LA(LEFT)  &lt 10 LA(RIGHT)
            >;
        };

        nav_layer_mac {
            bindings = <
              &kp LG(Q)          &kp LG(LS(LBKT))  &kp TAB     &kp LG(LS(RBKT))  &kp LG(SPACE)        &kp INS        &home_mac        &up_no_rsft      &end_mac        &kp DEL
              &kp LCTRL          &kp LGUI          &kp LALT    &kp LSHFT         &lt 23 LS(LG(N4))    &key_on RSHFT  &left_no_rsft    &down_no_rsft    &right_no_rsft  &kp BSPC
&kp LG(LBKT)  &show_desktop_mac  &kp LC(LEFT)      &kp LC(UP)  &kp LC(RIGHT)     &kp GLOBE            &finder_mac    &kp PG_UP        &trans           &kp PG_DN       &lt 25 BSPC  &kp LG(RBKT)
                                                   &trans      &kp SPACE         &trans               &trans         &lt 12 LG(LBKT)  &lt 11 LG(RBKT)
            >;
        };

        nav_files_win {
            bindings = <
        &trans        &trans    &trans     &trans     &trans    &trans  &kp LA(LEFT)  &kp UP_ARROW  &kp LA(RIGHT)  &trans
        &kp LEFT_GUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans    &kp F2  &kp LA(UP)    &kp DOWN      &kp RET        &kp LA(RET)
&trans  &trans        &trans    &trans     &trans     &trans    &trans  &kp LC(V)     &kp LC(C)     &kp LC(X)      &trans       &trans
                                &trans     &trans     &trans    &trans  &trans        &trans
            >;

            label = "NAV_FILES_WIN";
        };

        nav_files_mac {
            bindings = <
        &trans     &trans    &trans    &trans     &trans    &trans   &kp LG(LBKT)  &kp UP     &kp LG(RBKT)  &trans
        &kp LCTRL  &kp LALT  &kp LGUI  &kp LSHFT  &trans    &kp RET  &kp LG(UP)    &kp DOWN   &kp LG(DOWN)  &kp LG(I)
&trans  &trans     &trans    &trans    &trans     &trans    &trans   &kp LG(V)     &kp LG(C)  &kp LG(X)     &trans     &trans
                             &trans    &trans     &trans    &trans   &trans        &trans
            >;
        };

        mouse_win {
            bindings = <
        &bt BT_SEL 0  &working_win  &personal_mac  &personal_and  &bt BT_SEL 4    &out OUT_USB  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP
        &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL      &kp LSHFT      &bt BT_CLR      &out OUT_BLE  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4    &to 12        &eng_win        &eng_mac        &gam_win         &to 20          &trans
                                    &trans         &trans         &kp TAB         &mkp RCLK     &mkp LCLK       &mkp MCLK
            >;
        };

        mouse_mac {
            bindings = <
        &bt BT_SEL 0  &working_win  &personal_mac  &personal_and  &bt BT_SEL 4    &out OUT_USB  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP
        &kp LCTRL     &kp LEFT_ALT  &kp LEFT_GUI   &kp LSHFT      &bt BT_CLR      &out OUT_BLE  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4    &to 12        &eng_win        &eng_mac        &to 7            &to 21          &trans
                                    &trans         &trans         &kp TAB         &mkp RCLK     &mkp LCLK       &mkp MCLK
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        common_num_win {
            if-layers = <1 12>;
            then-layer = <13>;
        };

        common_sym_win {
            if-layers = <1 16>;
            then-layer = <17>;
        };

        shortcuts_mac {
            if-layers = <3 4>;
            then-layer = <5>;
        };

        SYM_EN_MAC {
            if-layers = <2 16>;
            then-layer = <18>;
        };

        SYM_RU_MAC {
            if-layers = <3 16>;
            then-layer = <19>;
        };

        NUM_EN_MAC {
            if-layers = <2 12>;
            then-layer = <14>;
        };

        NUM_RU_MAC {
            if-layers = <3 12>;
            then-layer = <15>;
        };

        gam_fn_mac {
            if-layers = <7 8>;
            then-layer = <9>;
        };
    };
};
